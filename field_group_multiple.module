<?php

/**
 * Gruppierungsarten
 * - key => value
 * - matrix
 *
 */

define("FIELD_GROUP_MULTIPLE", "field_group_multiple");

/**
 * Implements hook_theme().
 */
function field_group_multiple_theme() {
  $path = drupal_get_path('module', FIELD_GROUP_MULTIPLE);

  return array(
    'field_group_multiple_table_form' => array(
      'render element' => 'elements',
    ),
    'field_group_multiple_container_form' => array(
      'render element' => 'elements',
    ),
    'field_group_multiple_label_value' => array(
      'render element' => 'elements',
    ),
    'field_group_multiple_container' =>array(
      	'variables' => array('group' => NULL,'items' => array(), 'elements' => array()),
        'template' => 'field-group-multiple-container',
        'pattern' => 'field-group-multiple-container__',
        'path' => $path,
    ),
    'field_group_multiple_label_value' =>array(
      	'variables' => array('group' => NULL,'items' => array(), 'elements' => array()),
        'template' => 'field-group-multiple-label-value',
        'pattern' => 'field-group-multiple-label-value__',
        'path' => $path,
    ),
    'field_group_multiple_table' =>array(
      	'variables' => array('group' => NULL,'items' => array(), 'elements' => array()),
        'template' => 'field-group-multiple-table',
        'pattern' => 'field-group-multiple-table__',
        'path' => $path,
    ),
  );
}


function field_group_multiple_field_group_formatter_info() {
  return array(
  	'display' => array(
  	  'field_group_multiple_table' => array(
  	    'label' => t('Multi field group table'),
  	    'description' => t('This fieldgroup renders the inner content with a theme.'),
  		'format_types' => array('open', 'collapsible', 'collapsed'),
        'instance_settings' => array(
  			'table_alignment' => 'horizontal',
        	'description' => '',
        	'show_label' => 1,
        	'label_element' => 'h3',
        	'effect' => 'none',
        	'speed' => 'fast',
        	'classes' => '',
        	'required_fields' => 1),
        'default_formatter' => 'open',
      ),
  	  'field_group_multiple_label_value' => array(
  	    'label' => t('Multi field group label-value field'),
  	    'description' => t('This fieldgroup renders the inner content with a theme.'),
      ),
  	  'field_group_multiple_container' => array(
  	    'label' => t('Multi field group container'),
  	    'description' => t('This fieldgroup renders the inner content with a theme.'),
      ),
    ),
  	'form' => array(
  	  'field_group_multiple_table' => array(
  	    'label' => t('Multiple field group table'),
  	    'description' => t('This fieldgroup renders the inner content with a theme.'),
  		'format_types' => array('open', 'collapsible', 'collapsed'),
        'instance_settings' => array(
  			'table_alignment' => 'horizontal',
  			'max_delta' => '-1',
        	'description' => '',
        	'show_label' => 1,
        	'label_element' => 'h3',
        	'effect' => 'none',
        	'speed' => 'fast',
        	'classes' => '',
        	'required_fields' => 1),
        'default_formatter' => 'open',
      ),
  	  'field_group_multiple_container' => array(
  	    'label' => t('Multi field group container'),
  	    'description' => t('This fieldgroup renders the inner content with a theme.'),
      ),
  	  'field_group_multiple_label_value' => array(
  	    'label' => t('Multiple field group label-value'),
  	    'description' => t('This fieldgroup renders the inner content with a theme.'),
      ),
    ),
  );
}


/**
* Implements hook_form_FORM_ID_alter().
* Using hook_form_field_ui_field_overview_form_alter.
*/
function field_group_multiple_form_field_ui_field_overview_form_alter(&$form, &$form_state) {
  form_load_include($form_state, 'inc', FIELD_GROUP_MULTIPLE, FIELD_GROUP_MULTIPLE . '.field_ui');
  field_group_multiple_field_ui_overview_form_alter($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Using hook_form_field_ui_display_overview_form_alter.
 */
function field_group_multiple_form_field_ui_display_overview_form_alter(&$form, &$form_state) {
  form_load_include($form_state, 'inc', FIELD_GROUP_MULTIPLE, FIELD_GROUP_MULTIPLE . '.field_ui');
  field_group_multiple_field_ui_overview_form_alter($form, $form_state, TRUE);
}


/**
 * Implements hook_field_group_format_settings().
 */
function field_group_multiple_field_group_format_settings($group){
  return _field_group_multiple_field_ui_group_function($group, 'format_settings');
}


/**
 * Implements hook_field_group_format_summary().
 */
function field_group_multiple_field_group_format_summary($group){
  return _field_group_multiple_field_ui_group_function($group, 'format_summary');
}


function _is_field_group_multiple($type){
  return preg_match('/^' . FIELD_GROUP_MULTIPLE . '/', $type);
}

function _is_field_widget($widget){
  return isset($widget['#entity_type']) && isset($widget['#bundle']) && isset($widget['#field_name']) && isset($widget['#language']) && isset($widget['#type']);
}


function _field_group_multiple_field_ui_group_function($group, $suffix = null){
  if(_is_field_group_multiple($group->format_type) && !empty($suffix)){
    module_load_include("inc", FIELD_GROUP_MULTIPLE, FIELD_GROUP_MULTIPLE . '.field_ui');
    $function = '_' . $group->format_type . '_' . $suffix;
    if(function_exists($function)){
      return $function($group);
    }
  }
}


/**
 * Implements hook_field_group_pre_render().
 */
function field_group_multiple_field_group_pre_render(&$element, $group, &$form) {
  $view_mode = isset($form['#view_mode']) ? $form['#view_mode'] : 'form';
  $group_type = $group->format_type;
  $id = $form['#entity_type'] . '_' . $form['#bundle'] . '_' . $view_mode . '_' . $group->group_name;

  if($view_mode == 'form'){
    // Modifications on formular widgets
    switch($group_type){
      //case 'field_group_multiple_label_value':
      case 'field_group_multiple_table':
      //case 'field_group_multiple_container':
        if(!isset($form['#field_group_multiple'][$group->group_name])) return;
        Logger::log($form);
        $group_id = $form['#field_group_multiple'][$group->group_name];

        // Disable Fields from view
        foreach($form[$group_id]['fields']['#children'] as $field_name){
          unset($element[$field_name]);
        }
        break;
    }
  }else{
    // some display mode

    switch($group_type){
      case 'field_group_multiple_table':
      case 'field_group_multiple_container':
        Logger::log("");

        $elements = array();

        $array_transposed = array();
        foreach($group->children as $field_name){
          $field =  $element[$field_name];
          //$field_type = $field['#field_type'];
          //$instance = $field['#object'];
          $elements[$field_name] = $field;

          $info = field_info_field($field_name);
          $function = $info['module'] . '_field_is_empty';

          $map = array();
          $count = 0;

          $child_count = count(element_children($field));
          $is_delta = $child_count == count($field['#items']);
          foreach($field['#items'] as $delta => $value){
            $_res = $function($value,$info);
            if(!$_res){
              // correct items mapping
              if($is_delta){
                $field_value = $field[$delta];
              }else{
                $field_value = $field[$count];
                $count++;
              }
              $array_transposed[$delta][$field_name] = $field_value;
            }else{
              $array_transposed[$delta][$field_name] = null;
            }
          }
        }

        $element = array(
          '#id' => $id,
      	  '#type' => 'fieldset',
          '#title' => check_plain(t($group->label)),
          '#weight' => $group->weight,
          '#collapsible' => false,
          '#collapsed' => false,
          '#pre_render' => array(),
          //'#attributes' => array('class' => explode(' ', $classes)),
          //'#description' => $description,
        );

        $element['#attached']['js'][] = 'misc/form.js';
        $element['#attached']['js'][] = 'misc/collapse.js';

        $element['items'] = array(
          '#theme' => $group_type,
          '#items' => $array_transposed,
          '#group' => $group,
          '#elements' => $elements,
        );

        //theme('field_group_multiple_container', array("rows"));
        break;

      case 'field_group_multiple_label_value':
        break;
    }
  }
}


function field_group_multiple_add_more_submit($form, &$form_state) {
  Logger::log("");

  $button = $form_state['triggering_element'];
  $parents = array_slice($button['#array_parents'], 0, -1);
  $element = drupal_array_get_nested_value($form, $parents);

  if(isset($element['fields'])){
    //$group_name = $element['#group_name'];
    $id = $element['fields']['#id'];
    $form_state['field_group_multiple'][$id]['count']++;
  }

  $form_state['rebuild'] = TRUE;
}


function field_group_multiple_add_more_js($form, $form_state) {
  $button = $form_state['triggering_element'];
  $element = drupal_array_get_nested_value($form, array_slice($button['#array_parents'], 0, -1));
  return $element;
}


/**
 * Implements hook_field_attach_form().
 */
function field_group_multiple_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {

  $bundle = $form['#bundle'];
  $groups = field_group_info_groups($entity_type, $bundle, 'form');
  if(!empty($groups)){

    foreach($groups as $group_name => $group){
      if(!_is_field_group_multiple($group->format_type)) continue;

      //if(!preg_match("/^field_group_multiple_table/",$group->format_type)) continue;

      //Logger::log($entity);
      $id = $group->entity_type . '_' . $group->bundle . '_form_' . $group->group_name;
      if(empty($form['#field_group_multiple'])) $form['#field_group_multiple'] = array();

      $form['#field_group_multiple'][$group->group_name] = $id;

      $wrapper_id = $id . '-add-more-wrapper';

      $form[$id] = array(
      	'#prefix' => '<div id="' . $wrapper_id . '">',
      	'#suffix' => '</div>',
      	'#group_name' => $group->group_name
      );

      $form[$id]['fields'] = array(
      	'#theme' => $group->format_type . '_form',
      	'#group_name' => $group->group_name,
      	'#id' => $id,
      	'#wrapper_id' => $wrapper_id,
      	'#children' => $group->children,
      );

      $form[$id]['fields']['#element_validate'] = array("field_group_multiple_field_form_validate");

      $form[$id]['add-more'] = array(
        '#type' => 'submit',
        '#name' => strtr($id, '-', '_') . '_add_more',
        '#value' => t('Add another item'),
        '#attributes' => array('class' => array('field-group-multiple-add-more-submit')),
      //'#limit_validation_errors' => array(array_merge($parents, array($field_name, $langcode))),
        '#submit' => array('field_group_multiple_add_more_submit'),
        '#ajax' => array(
          'callback' => 'field_group_multiple_add_more_js',
          'wrapper' => $wrapper_id,
          'effect' => 'fade',
        ),
      );

      if(!isset($form['#parents'])) {
        $form_state['field_group_multiple'][$id]['parents'] = array();
      } else {
        $form_state['field_group_multiple'][$id]['parents'] = $form['#parents'];
      }

      Logger::log($form_state['field_group_multiple']);

      foreach($group->children as $field_name){
        $langcode = $form[$field_name]['#language'];
        $field_state = field_form_get_state($form_state['field_group_multiple'][$id]['parents'], $field_name, $langcode, $form_state);
        $field = $field_state['field'];
        $instance = $field_state['instance'];
        Logger::log($field_state);
        $items = field_get_default_value($entity_type, $entity, $field, $instance, $langcode);
        $widget = _field_group_multiple_get_field_widget($field, $instance, $langcode, $items, 0, $form, $form_state);

        $form[$id]['fields']['#orginal'][$field_name] = $form[$field_name];
        $form[$id]['fields']['#widget'][$field_name] = $widget;

        unset($form[$field_name]);
      }

      Logger::log($form[$id]['fields']['#widget']);
      _field_group_multiple_after_build_calculate_items($id, $entity_type, $entity, $form, $form_state);
     // Logger::log($form);
    }
  }
}

// /**
//  * Add additional validation function to secure the write back of submited values
//  */
// function _field_group_multiple_populate_validate_callbacks($group_id, &$field_form){
//    if(_is_field_widget($field_form)){
//      // is field widget
//      //$lang = $field_form['#language'];
//      $field_form['#field_group_multiple'] = $group_id;
//      if(!isset($field_form['#element_validate'])) $field_form['#element_validate'] = array();
//      $field_form['#element_validate'] = array_merge(array("field_group_multiple_field_form_prepare_validate"), $field_form['#element_validate']);
//    }else{
//      foreach(element_children($field_form) as $child_name){
//        _field_group_multiple_populate_validate_callbacks($group_id, $field_form[$child_name]);
//      }
//    }
// }


function _field_group_multiple_get_field_widget($field, $instance, $langcode, $items, $delta, $form, $form_state){
  $element = null;
  $field_name = $field['field_name'];
  Logger::log($field_name);
  $parents = $form['#parents'];
  //$delta = isset($get_delta) ? $get_delta : 0;

  $function = $instance['widget']['module'] . '_field_widget_form';
  if (function_exists($function)) {
    $element = array(
            '#entity_type' => $instance['entity_type'],
            '#bundle' => $instance['bundle'],
            '#field_name' => $field_name,
            '#language' => $langcode,
            '#field_parents' => $parents,
            '#columns' => array_keys($field['columns']),
            '#title' => check_plain($instance['label']),
            '#description' => field_filter_xss($instance['description']),
    // Only the first widget should be required.
            '#required' => $delta == 0 && $instance['required'],
    		//'#required' => $instance['required'],
            '#delta' => $delta,
    );
    if ($element = $function($form, $form_state, $field, $instance, $langcode, $items, $delta, $element)) {
      // Allow modules to alter the field widget form element.
      $context = array(
              'form' => $form,
              'field' => $field,
              'instance' => $instance,
              'langcode' => $langcode,
              'items' => $items,
              'delta' => $delta,
      );
      drupal_alter(array('field_widget_form', 'field_widget_' . $instance['widget']['type'] . '_form'), $element, $form_state, $context);

    }
  }
  //return empty(element_children($element)) ? $element ;
  return $element;
}

/**
 * Implements hook_field_attach_form().
 */
function field_group_multiple_field_attach_submit($entity_type, &$entity, $form, &$form_state) {

  if(isset($form['#field_group_multiple'])){

    foreach($form['#field_group_multiple'] as $group_name => $id){

      //$form_state['field_group_multiple'][$id]['parents']
      $parents = array($id, "fields" , "items");


      Logger::log($form_state['values']);

      $form_values = drupal_array_get_nested_value($form_state['values'], $parents);

      Logger::log($form_values);
      //Logger::log($form_values);
      $items_count = count($form_values);


      //$functions = array();

      $values = array();
      foreach($form[$id]['fields']['#orginal'] as $field_name => $field_data){
        $entity->{$field_name} = array();

        $langcode = $field_data['#language'];
        // mark empty fields
        $info = field_info_field($field_name);
        $columns = array_keys($info['columns']);
        $function = $info['module'] . '_field_is_empty';

        foreach($form_values as $delta => $value){
          if(isset($value[$field_name])){

            if(isset($value[$field_name]['0'])){
              // composite value
              $values[$field_name]['empty'][$delta] = $function($value[$field_name]['0'],$info);
              $values[$field_name]['values'][$langcode][$delta] = $value[$field_name][0];
            }else{
              // single value
              $value_key = array_pop($columns);
              $values[$field_name]['empty'][$delta] = $function($value[$field_name],$info);
              $values[$field_name]['values'][$langcode][$delta] = $value[$field_name];
            }

          }

        }
      }

      Logger::log($values);
      for($i=0; $i < $items_count ; $i++){
        $is_empty = true;

        foreach($values as $field_name => $field_values){
          if(!$field_values['empty'][$i]) {
            $is_empty = false;
            break;
          }
        }
      //  Logger::log($i . ' => ' . $is_empty);
        if(!$is_empty){

          foreach($values as $field_name => $field_values){
            // TODO Currently only one value!!!
            $langcode = key($field_values['values']);
            $entity->{$field_name}[$langcode][] = $field_values['values'][$langcode][$i];
          }
        }
      }
    }
  }
}




function field_group_multiple_field_form_validate($element, &$form_state) {

}


function _field_group_multiple_after_build_calculate_items($id, $entity_type, $entity, &$form, &$form_state){
  Logger::log("");

  $group_parents = $form_state['field_group_multiple'][$id]['parents'];
  $field_names = element_children($form[$id]['fields']['#widget']);

  $fields = array();
  foreach($field_names as $field_name){
    $fields[$field_name] = $form[$id]['fields']['#widget'][$field_name];
  }

  $field_values = _field_group_multiple_get_field_values($entity, $form[$id]['fields']['#orginal']);

  Logger::log($field_values);
  $field_value_count = count($field_values);
  $items_count = 0;

  if(isset($form_state['field_group_multiple'][$id]['count'])){
    $items_count = $form_state['field_group_multiple'][$id]['count'];
  }else{
    $form_state['field_group_multiple'][$id]['count'] = $items_count = $field_value_count;
  }

  if($items_count == 0) $items_count++;

  if(($c_diff = abs($items_count - $field_value_count)) > 0){
    for($i=0; $i < $c_diff; $i++){
      $data = array();
      foreach($field_names as $field_name){
        // TODO maybe default value ???
        $data[$field_name] = null;
      }
      $field_values[] = $data;
    }
  }

  $group_parents = array($id, 'fields', 'items');
  $items = array();
  for($delta=0; $delta < $items_count; $delta++){
    $field_cols = $field_values[$delta];
    foreach($field_cols as $field_name => $field_value){
      Logger::log($field_name);

      $widget = $fields[$field_name];
      $widget = _field_group_multiple_populate_widget_delta($widget, $delta, $group_parents, $field_value);
      $items[$delta][$field_name] = $widget;
    }
  }

  $form[$id]['fields']['items'] = $items;
  Logger::log($form);
}

function _field_group_multiple_populate_widget_delta($widget, $delta, $group_parents, $values, $widget_key = null){
  $new_widget = array();
  if(_is_field_widget($widget)){
    $new_widget = $widget;
    $field_name = $widget['#field_name'];
    $new_widget['#delta'] = $delta;
    $columns = $new_widget['#columns'];

    $new_widget['#parents'] = array_merge($group_parents,array($delta, $field_name));

    unset($new_widget['#title'], $new_widget['#description'],
    $new_widget['#value'], $new_widget['#default_value']);
    $new_widget['#multiple'] = 0;

    $new_widget['#default_value'] = null;
    if(isset($new_widget['#value_key']) && isset($values[$new_widget['#value_key']])){
      $new_widget['#default_value'] = array($delta => $values[$new_widget['#value_key']]);
    }elseif(!is_null($widget_key) && isset($values[$widget_key])){
      $new_widget['#default_value'] = $values[$widget_key];
    }else{
      //$new_widget['#default_value'] = $values;
    }
  }else{
    foreach(element_children($widget) as $widget_child){
      $new_widget[$widget_child] = _field_group_multiple_populate_widget_delta($widget[$widget_child], $delta, $group_parents, $values, $widget_child);
      if(isset($new_widget[$widget_child]['#parents'])){
        $new_widget[$widget_child]['#parents'][] = $widget_child;
      }
    }
  }
  return $new_widget;
}


function _field_group_multiple_get_child($array){
    $children = element_children($array);
    $next = array();
    foreach($children as $child_id){
        $child = $array[$child_id];
        Logger::log($child_id);
        if(isset($child['#field_name']) && isset($child['#entity_type'])){
          return $child;
        }else{
          $next = _field_group_multiple_get_child($child);
          if(!is_null($next)) return $next;
        }
    }
    return null;
}


function _field_group_multiple_get_field_values($entity, $fields){

  $values = array();
  $max_items = 0;

  foreach($fields as $field_name => $field){
    $language = $field['#language'];
    //$field_data = $field[$language];

    if(isset($entity->{$field_name}[$language])){
      $count = count($entity->{$field_name}[$language]);
      Logger::log($count);
      if($max_items < $count){
        $max_items = $count;
      }
      Logger::log($max_items);
    }
  }

  for($i=0; $i < $max_items; $i++){
    foreach($fields as $field_name => $field){
      if(isset($entity->{$field_name}[$language][$i])){
        $values[$i][$field_name] =  $entity->{$field_name}[$language][$i];
      }else{
        $values[$i][$field_name] =  null;
      }
    }
  }

  // remove empty rows
//   $corrected_values = array();
//   foreach($values as $i => $data){
//     $is_empty = false;
//     foreach($data as $field_name => $field_value){
//       if(is_null($field_value)){
//         $is_empty = true;
//       }else{
//         $is_empty = false;
//       }
//     }
//     if(!$is_empty){
//       $corrected_values[] = $data;
//     }
//   }
  return $values;
}


function theme_field_group_multiple_container_form($variables) {
  // TODO
  Logger::log("");
  theme_field_group_multiple_table_form($variables);
}


function theme_field_group_multiple_label_value_form($variables) {
  // TODO
  Logger::log("");
}


function theme_field_group_multiple_table_form($variables) {
  Logger::log("");
  $element = $variables['elements'];

  $orginal_fields = $element['#orginal'];
  $id = $element['#id'];
  $items = $element['items'];

  $header = array();
  $rows = array();


  foreach(element_children($items) as $field_name){

    $container = $orginal_fields[$field_name];
    $language = $container['#language'];
    $field_data = $container[$language];

    $field_title = $field_data['#title'];
    $field_description = $field_data['#description'];

    $header[] = t($field_title)."<br/><em>".t($field_description).'</em>';
  }

  foreach(element_children($items) as $delta){
    $field_data = $items[$delta];
    $row = array();
    foreach(element_children($field_data) as $field_name){
      $data = $field_data[$field_name];
      $row[] = array("data" => drupal_render($data), "class" => "");
    }
    $rows[] = array("data"=>$row,"class" => array("row-delta-".$delta));
  }


  $wrapper_id = drupal_html_id($id . '-add-more-wrapper');
  $table_id = drupal_html_id($id . '_values');

  $output = "";

  $output = '<div class="form-item">';
  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => $table_id, 'class' => array('field-group-multiple-table'))));
  //$output .= $element['#description'] ? '<div class="description">' . $element['#description'] . '</div>' : '';
  $output .= '</div>';

  return $output;
}


function template_preprocess_field_group_multiple_container(&$variables){
  Logger::log("");
  Logger::log($variables);
  drupal_add_css(drupal_get_path("module", "field_group_multiple")."/field_group_multiple.css");

  // TODO theme suggestions
}

function template_preprocess_field_group_multiple_label_value(&$variables){
  // TODO theme
  // TODO theme suggestions
}


function template_preprocess_field_group_multiple_table(&$variables){
  // TODO theme
  // TODO theme suggestions
  Logger::log("");
  Logger::log($variables);
  drupal_add_css(drupal_get_path("module", "field_group_multiple")."/field_group_multiple.css");

  $group = $variables['group'];
  $elements = $variables['elements'];
  $items = $variables['items'];

  $header = array();
  $rows = array();

  // TODO Prüfe, ob untrige Elemente multiple Felder sind
  $id = $group->group_name;

  foreach(element_children($elements) as $field_name){
    $field = $elements[$field_name];
    $field_title = $field['#title'];
//    $field_description = $field['#description'];
    $header[] = t($field_title);
  }

  foreach(element_children($items) as $delta){
    $row_values = $items[$delta];

    $row = array();
    foreach(element_children($row_values) as $field_name){
      $data = $row_values[$field_name];
      Logger::log($delta . ' => ' . print_r($data,true));
      $row[] = array("data" => drupal_render($data), "class" => "");
    }
    $rows[] = array("data"=>$row,"class" => array("row-delta-".$delta));
  }

  $table_id = drupal_html_id($id . '_values');
  $variables['table'] = theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => $table_id, 'class' => array('field-group-multiple-table'))));
}

// function field_group_multiple_field_group_build_pre_render_alter(& $element){
//   Logger::log("");
// }

// function field_group_multiple_ctools_plugin_api($module, $api){
//   Logger::log("");
// }
// function field_group_multiple_field_group_info(){
//   Logger::log("");
// }
// function field_group_multiple_field_group_update_field_group($group){
//   Logger::log("");
// }
// function field_group_multiple_field_group_delete_field_group($group){
//   Logger::log("");
// }
// function field_group_multiple_field_group_create_field_group($group){
//   Logger::log("");
// }


// function field_group_multiple_field_form_prepare_validate(&$element, &$form_state){

//   $field_name = $element['#field_name'];
//   $field_lang = $element['#language'];
// //  $field_key  = $element['#value_key'];
//   $columns  = $element['#columns'];

// //   $field = field_widget_field($element, $form_state);
// //   $columns = array_keys($field['columns']);
// //   Logger::log($field);

// //   //$instance = field_widget_instance($element, $form_state);
// //   Logger::log($instance);
//   // field_

//   Logger::log($field_name);
//   //Logger::log($element);

//   //Logger::log($form_state['values']);
//   //$field_parents = array_merge($element['#field_parents'],array($field_name,$field_lang));

//   $field_group_multiple_id = $element['#field_group_multiple'];

//   $group_parents = $form_state['field_group_multiple'][$field_group_multiple_id]['parents'];
//   $group_parents[] = $field_group_multiple_id;
//   $group_parents[] = "fields";

//   $values = drupal_array_get_nested_value($form_state['values'], $group_parents);

//   $new_values = array();

//   if(!empty($values) && isset($values['items'])){
//     $item_count = count($values['items']);

//     if($item_count > 0){
//       for($i=0;$i<$item_count; $i++){
//         //$new_values[$i] = "_none";
//         if(isset($values['items'][$i][$field_name])){
//           // TODO gilt das nur bei listen???
//             if($values['items'][$i][$field_name] == '_none'){
//               $new_values[$i] = 0;
//             }else{
//               $new_values[$i] = $values['items'][$i][$field_name];
//             }
// //           }
//         }
//       }
//     }
//   }

// //  Logger::log($new_values);
//   $element['#value'] = $new_values;
// }


// function field_group_multiple_theme(){
//   $path = drupal_get_path('module', 'field_group_multiple');

//   return array(
// 	  'field_group_multiple_label_value' =>
// 	    array("variables" => array("element" => NULL,"group" => NULL)),
// 	  'field_group_multiple_table' =>
// 	    array("variables" => array("element" => NULL,"group" => NULL)),
// 	  'field_group_multiple' => array(
//       	'variables' => array('group' => NULL,'element' => NULL),
//         'template' => 'field_group_multiple',
//         'pattern' => 'field_group_multiple__',
//         'path' => $path,
//     ),
//   );
// }


/**
 * A preprocess function for our theme('multi_group_special'). It generates the
* variables needed there.

* See 'multi_group.tpl.php' for their documentation.
*/
/*
 function template_preprocess_multi_group(&$variables) {
$group = $variables['group'];

$variables['theme_hook_suggestions'][] = 'multi_group__' . $group->name;
// // Logger::log(__METHOD__." HALLO ".print_r($variables['theme_hook_suggestions'],true));
}
*/


// function theme_multi_group_template($variables){
//   $element = $variables['element'];
//   $group = $variables['group'];

//   $rows_size = 0;
//   $fields = array();
//   $header = array();

//   foreach($element as $fieldname => $field_data){
//     $weight =  $field_data["#weight"];
//     $header[$weight] = $field_data["#title"];
//     $fields[$weight] = $fieldname;

//     $tmp_size = count($field_data["#items"]);

//     if($rows_size < $tmp_size){
//       $rows_size = $tmp_size;
//     }
//   }
//   ksort($fields); ksort($header);

//   $rows = array();
//   for($i=0;$i<$rows_size;$i++) {
//     $row = array();
//     foreach($fields as  $fieldname){
//       $field_data = $element[$fieldname][$i];
//       $row[] = drupal_render($field_data);
//     }
//     $rows[] = $row;
//   }

//   $classes = $group->name;
//   if (isset($group->format_settings['instance_settings'], $group->format_settings['instance_settings']['classes'])) {
//     $classes .= ' ' . check_plain($group->format_settings['instance_settings']['classes']);
  //   }


  //   $out = '<div class="field-group-format ' . $classes. '">
  //               <span class="field-group-format-toggler">' . check_plain(t($group->label)) . '</span>
  //               <div class="field-group-format-wrapper" style="display: ' . ($collapsed ? 'none' : 'block') . ';">';
  //   $out .= theme("table",array("header"=>$header,"rows"=>$rows));
  //   $out .= '</div></div>';


  //   return $out;
  // }


  // function theme_multi_group_label_value($variables){
  //   $element = $variables['element'];
  //   $group = $variables['group'];


  //   $fields = array();
  //   foreach($element as $fieldname => $field_data){
  //     $weight =  $field_data["#weight"];
    //     $fields[$weight] = $fieldname;
    //   }
    //   ksort($fields);


    //   $labels = $element[array_shift($fields)];
    //   $values = $element[array_shift($fields)];

    //   $defaults = array();
    //   $defaults['#theme'] = "field";
    //   $defaults['#access'] = TRUE;
    //   $defaults['#label_display'] = $values['#label_display'];
    //   $defaults['#field_name'] = $values['#field_name'];
    //   $defaults['#bundle'] = $values['#bundle'];
    //   $defaults['#field_type'] = $values['#field_type'];

    //   $size = count($values['#items']);
    //   $items = array();

    //   for($i=0; $i < $size; $i++) {
    //     $tmp = $defaults;
    //     $tmp['#title'] = ucfirst($labels[$i]["#markup"]);
    //     $tmp['#items'][0] = $values['#items'][$i];
    //     $tmp[0]['#markup'] = $values[$i]['#markup'];

    //     $items[] = drupal_render($tmp);
    //   }

    //   if(isset($group->name))	$classes = $group->name;
    //   else $classes = '';
    //   if (isset($group->format_settings['instance_settings'], $group->format_settings['instance_settings']['classes'])) {
    //     $classes .= ' ' . check_plain($group->format_settings['instance_settings']['classes']);
    //   }

    //   return implode("\n",$items);
    // }
