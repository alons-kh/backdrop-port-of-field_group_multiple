<?php

define("FIELD_GROUP_MULTIPLE", "field_group_multiple");

/**
 * Implements hook_theme().
 */
function field_group_multiple_theme() {
  $path = drupal_get_path('module', FIELD_GROUP_MULTIPLE);

  return array(
    'field_group_multiple_table_form' => array(
      'render element' => 'elements',
  ),
    'field_group_multiple_container_form' => array(
      'render element' => 'elements',
  ),
    'field_group_multiple_label_value_form' => array(
      'render element' => 'elements',
  ),
    'field_group_multiple_container' => array(
      'variables' => array('group' => NULL, 'items' => array(), 'elements' => array()),
      'template' => 'field-group-multiple-container',
      'pattern' => 'field-group-multiple-container__',
      'path' => $path,
  ),
    'field_group_multiple_label_value' => array(
      'variables' => array('group' => NULL, 'items' => array(), 'elements' => array()),
      'template' => 'field-group-multiple-label-value',
      'pattern' => 'field-group-multiple-label-value__',
      'path' => $path,
  ),
    'field_group_multiple_table' => array(
      'variables' => array('group' => NULL, 'items' => array(), 'elements' => array()),
      'template' => 'field-group-multiple-table',
      'pattern' => 'field-group-multiple-table__',
      'path' => $path,
  ),
  );
}

/**
 * Implements _field_group_formatter_info().
 */
function field_group_multiple_field_group_formatter_info() {
  $instance_settings = array(
    'description' => '',
    'show_label' => 1,
    'label_element' => 'h3',
    'effect' => 'none',
    'speed' => 'fast',
    'parent_format_type' => 'div',
    'classes' => '',
    'required_fields' => 1
  );

  $group_additions = array(
    'field_group_multiple_container' => array(
      'label' => t('Multiple fields container'),
      'description' => t('This field group type renders the items of multiple fields in the group as single container.'),
      'format_types' => array('open', 'collapsible', 'collapsed'),
      'instance_settings' => $instance_settings,
      'default_formatter' => 'open',
  ),
    'field_group_multiple_table' => array(
      'label' => t('Multiple fields table'),
      'description' => t('This field group type renders the items of multiple fields in the group as rows of the table.'),
      'format_types' => array('open', 'collapsible', 'collapsed'),
      'instance_settings' => $instance_settings,
      'default_formatter' => 'open',
  ),
    'field_group_multiple_label_value' => array(
      'label' => t('Multiple fields as label-value'),
      'description' => t('This field group type renders the items of two multiple fields in the group as single fields where the label of field is the value of the selected label-field and the other field represents the value.'),
      'format_types' => array('open', 'collapsible', 'collapsed'),
      'instance_settings' => $instance_settings + array('label_value_field' => ''),
      'default_formatter' => 'open',
  ),
  );

  return array(
    'display' => $group_additions,
    'form' => $group_additions,
  );
}


/**
 * Implements hook_form_FORM_ID_alter().
 * Using hook_form_field_ui_field_overview_form_alter.
 */
function field_group_multiple_form_field_ui_field_overview_form_alter(&$form, &$form_state) {
  form_load_include($form_state, 'inc', FIELD_GROUP_MULTIPLE, FIELD_GROUP_MULTIPLE . '.field_ui');
  field_group_multiple_field_ui_overview_form_alter($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Using hook_form_field_ui_display_overview_form_alter.
 */
function field_group_multiple_form_field_ui_display_overview_form_alter(&$form, &$form_state) {
  form_load_include($form_state, 'inc', FIELD_GROUP_MULTIPLE, FIELD_GROUP_MULTIPLE . '.field_ui');
  field_group_multiple_field_ui_overview_form_alter($form, $form_state, TRUE);
}


/**
 * Implements hook_field_group_format_settings().
 */
function field_group_multiple_field_group_format_settings($group) {
  return _field_group_multiple_field_ui_group_function($group, 'format_settings');
}


/**
 * Implements hook_field_group_format_summary().
 */
function field_group_multiple_field_group_format_summary($group) {
  return _field_group_multiple_field_ui_group_function($group, 'format_summary');
}


/**
 * Implements hook_field_group_pre_render().
 */
function field_group_multiple_field_group_pre_render(&$element, $group, &$form) {
  if (!_is_field_group_multiple($group->format_type)) {
    return;
  }

  $view_mode = isset($form['#view_mode']) ? $form['#view_mode'] : 'form';
  $id = _field_group_multiple_id($group, $view_mode);

  if ($view_mode == 'form') {
    // Modifications on formular widgets
    $element = array();

    if(empty($group->children)) return; // do nothing if no fields are grouped

    if (isset($group->format_settings['instance_settings']['parent_format_type'])) {
      $format_type = $group->format_settings['instance_settings']['parent_format_type'];

      if (!empty($format_type)) {
        // build the parent group in which the form will be embedded
        $parent_group = clone $group;
        $parent_group->format_type = $format_type;
        $form[$id . "_" . $format_type] = array();
        field_group_field_group_pre_render($form[$id . "_" . $format_type], $parent_group, $form);
        $form[$id . "_" . $format_type]['group'] = $form[$id];
        $form[$id . "_" . $format_type]['#weight'] = $form[$id]['#weight'];
        unset($form[$id]);
      }
    }

    // disable form widgets
    foreach($group->children as $field_name){
      unset($form[$field_name]);
    }
  }
  else {
    // some display mode

    $elements = array();
    $array_transposed = array();

    if(empty($group->children)) return; // do nothing if no fields are grouped

    foreach ($group->children as $field_name) {
      $field =  $element[$field_name];
      $elements[$field_name] = $field;

      $info = field_info_field($field_name);
      $function = $info['module'] . '_field_is_empty';

      $map = array();
      $count = 0;

      $child_count = count(element_children($field));
      $is_delta = $child_count == count($field['#items']);
      foreach ($field['#items'] as $delta => $value) {
        $_res = $function($value, $info);
        if (!$_res) {
          // correct items mapping
          if ($is_delta) {
            $field_value = $field[$delta];
          }
          else {
            $field_value = $field[$count];
            $count++;
          }
          $array_transposed[$delta][$field_name] = $field_value;
        }
        else {
          $array_transposed[$delta][$field_name] = NULL;
        }
      }
    }

    $element = array(); // reset element

    if (isset($group->format_settings['instance_settings']['parent_format_type'])) {
      $format_type = $group->format_settings['instance_settings']['parent_format_type'];
      if (!empty($format_type)) {
        $parent_group = clone $group;
        $parent_group->format_type = $format_type;
        field_group_field_group_pre_render($element, $parent_group, $form);
      }
    }

    $element['#weight'] = $group->weight;
    $element['items'] = array(
      '#theme' => $group->format_type,
      '#items' => $array_transposed,
      '#group' => $group,
      '#elements' => $elements,
    );
  }
}


function field_group_multiple_add_more_submit($form, &$form_state) {
  $button = $form_state['triggering_element'];
  $parents = array_slice($button['#array_parents'], 0, -1);
  $element = drupal_array_get_nested_value($form, $parents);

  if (isset($element['fields'])) {
    $id = $element['fields']['#id'];
    //     if (!isset($form_state['field_group_multiple'][$id]['count'])) {
    //       $form_state['field_group_multiple'][$id]['count'] = 1;
    //     }
    $form_state['field_group_multiple'][$id]['count']++;
  }

  $form_state['rebuild'] = TRUE;
}


function field_group_multiple_add_more_js($form, $form_state) {
  $button = $form_state['triggering_element'];
  $element = drupal_array_get_nested_value($form, array_slice($button['#array_parents'], 0, -1));
  return $element;
}


/**
 * Implements hook_field_attach_form().
 */
function field_group_multiple_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {

  $bundle = $form['#bundle'];
  $groups = field_group_info_groups($entity_type, $bundle, 'form');
  if (!empty($groups)) {

    foreach ($groups as $group_name => $group) {
      if (!_is_field_group_multiple($group->format_type)) continue;

      if(empty($group->children)) continue; // do nothing if no fields are grouped

      $id = _field_group_multiple_id($group, 'form');
      if (empty($form['#field_group_multiple'])) $form['#field_group_multiple'] = array();

      $form['#field_group_multiple'][$group->group_name] = $id;

      $form_state['field_group_multiple'][$id]['children'] = array();

      if (!isset($form['#parents'])) {
        $form_state['field_group_multiple'][$id]['parents'] = array();
      }
      else {
        $form_state['field_group_multiple'][$id]['parents'] = $form['#parents'];
      }

      $wrapper_id = $id . '-add-more-wrapper';

      // TODO currently subgrouping is not allowed, solve this
      $group_template = array(
        '#id' => $id,
        '#prefix' => '<div id="' . $wrapper_id . '">',
        '#suffix' => '</div>',
        '#group_name' => $group->group_name,
        '#tree' => TRUE,
      );

      // attach at the top of the form
      $form[$id] = $group_template;
      $group_element =& _field_group_multiple_get_group_wrapper($id, $form);

      $group_element['fields'] = array(
        '#theme' => $group->format_type . '_form',
        '#group_name' => $group->group_name,
        '#id' => $id,
        '#wrapper_id' => $wrapper_id,
        '#children' => $group->children,
        '#group' => $group,
      );

      $cardinalities = array();
      foreach ($group->children as $field_name) {
        $langcode = $form[$field_name]['#language'];
        $form_state['field_group_multiple'][$id]['children'][$field_name] = $langcode;

        $field_state = field_form_get_state($form_state['field_group_multiple'][$id]['parents'], $field_name, $langcode, $form_state);
        $field = $field_state['field'];
        $instance = $field_state['instance'];
        $cardinalities[$field_name] = $field['cardinality'];

        // TODO check field access!!
        $group_element['fields']['#orginal'][$field_name] = $form[$field_name];
        $group_element['fields']['#fields'][$field_name] = $field_state;

        $form[$field_name] = array(); // reset field, not unset, because the field_group_pre_render works only if child elements exists
      }

      $cardinality = _field_group_multiple_get_max_cardinality($cardinalities);
      _field_group_multiple_build_transposed_widget_items($id, $entity_type, $entity, $form, $form_state, $cardinality);
      $items_count = $form_state['field_group_multiple'][$id]['count'];

      $form_state['field_group_multiple'][$id]['cardinality'] = $cardinality;

      //$add_more_enable = false;
      if ($cardinality == FIELD_CARDINALITY_UNLIMITED) {
        //$add_more_enable = true;
        $group_element['add-more'] = array(
                  '#type' => 'submit',
                  '#name' => strtr($id, '-', '_') . '_add_more',
                  '#value' => t('Add another item'),
                  '#attributes' => array('class' => array('field-group-multiple-add-more-submit')),
                  '#limit_validation_errors' => array(array_merge($form_state['field_group_multiple'][$id]['parents'], array($id))),
                  '#submit' => array('field_group_multiple_add_more_submit'),
                  '#ajax' => array(
                    'callback' => 'field_group_multiple_add_more_js',
                    'wrapper' => $wrapper_id,
                    'effect' => 'fade',
          ),
        );
      }
    }
  }
}


/**
 * Implements hook_field_attach_form().
 */
function field_group_multiple_field_attach_submit($entity_type, &$entity, $form, &$form_state) {

  if (isset($form['#field_group_multiple'])) {

    foreach ($form['#field_group_multiple'] as $group_name => $id) {
      $group_element =& _field_group_multiple_get_group_wrapper($id, $form);

      if (!isset($group_element['#parents'])) $group_element['#parents'] = array($id);
      $parents = array_merge($group_element['#parents'], array("fields" , "items") );
      $form_values = drupal_array_get_nested_value($form_state['values'], $parents);
      $items_count = count($form_values);

      $values = array();
      foreach ($group_element['fields']['#orginal'] as $field_name => $field_data) {
        $entity->{$field_name} = array();

        $langcode = $field_data['#language'];
        // mark empty fields
        $info = field_info_field($field_name);
        $columns = array_keys($info['columns']);
        $function = $info['module'] . '_field_is_empty';

        foreach ($form_values as $delta => $value) {
          if (isset($value[$field_name])) {

            if (isset($value[$field_name]['0'])) {
              // composite value
              $values[$field_name]['empty'][$delta] = $function($value[$field_name]['0'], $info);
              $values[$field_name]['values'][$langcode][$delta] = $value[$field_name][0];
            }
            else{
              // single value
              $value_key = array_pop($columns);
              $values[$field_name]['empty'][$delta] = $function($value[$field_name], $info);
              $values[$field_name]['values'][$langcode][$delta] = $value[$field_name];
            }
          }
        }
      }

      for ($i=0; $i < $items_count ; $i++) {
        $is_empty = TRUE;

        foreach ($values as $field_name => $field_values) {
          if (!$field_values['empty'][$i]) {
            $is_empty = FALSE;
            break;
          }
        }

        if (!$is_empty) {
          foreach ($values as $field_name => $field_values) {
            $langcode = key($field_values['values']);
            $entity->{$field_name}[$langcode][] = $field_values['values'][$langcode][$i];
          }
        }
      }
    }
  }
}


/**
 * TODO implement drag & drop for order and remove item row
 */
function theme_field_group_multiple_container_form($variables) {
  drupal_add_css(drupal_get_path("module", "field_group_multiple") . "/field_group_multiple.css");

  $element = $variables['elements'];

  $orginal_fields = $element['#orginal'];
  $id = $element['#id'];
  $items = $element['items'];
  $group = $element['#group'];

  $entries = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'field-group-multiple',
        'field-group-multiple-container',
  ),
  ),
  );

  foreach (element_children($items) as $delta) {
    $field_data = $items[$delta];
    $entry = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array(
          'multiple-inline-element',
          'multiple-item-' . drupal_html_class($delta),
          'clearfix',
    $delta % 2 == 0 ? 'even' : 'odd',
    ),
    ),
      '#weight' => $delta,
    );

    $order = 0;
    foreach (element_children($field_data) as $field_name) {
      $data = $field_data[$field_name];

      $container = $orginal_fields[$field_name];
      $language = $container['#language'];
      $field_definition = $container[$language];

      $data['#title'] = $field_definition['#title'];
      $data['#description'] = $field_definition['#description'];

      $elem = array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array(
            'multiple-element',
            'multiple-' . drupal_html_class($field_name),
      ),
      //'style' => 'width: ' . intval((95 / count($group->children))) . '%;'
      ),
        '#weight' => $order,
        'data' => $data,
      );

      $order++;
      $entry[$field_name] = $elem;
    }
    $entries[] = $entry;
  }

  $output = '<div class="form-item">';
  $output .= drupal_render($entries);
  $output .= isset($element['#description']) ? '<div class="description">' . $element['#description'] . '</div>' : '';
  $output .= '</div>';

  return $output;
}

/**
 * TODO implement drag & drop for order and remove item row
 */
function theme_field_group_multiple_label_value_form($variables) {
  drupal_add_css(drupal_get_path("module", "field_group_multiple") . "/field_group_multiple.css");

  $element = $variables['elements'];

  $orginal_fields = $element['#orginal'];
  $id = $element['#id'];
  $items = $element['items'];
  $group = $element['#group'];

  $header = array();
  $rows = array();


  $label_field = $group->format_settings['instance_settings']['label_value_field'];
  $value_field = array_shift(array_diff($group->children, array($label_field)));

  $_header = array(
    'label' => array('t' => 'Label', 'd' => 'Label for values', 'f' => $label_field),
    'value' => array('t' => 'Value', 'd' => '', 'f' => $value_field),
  );

  foreach ($_header as $data) {
    $header_entry = '<div class="th-title-label">' . t($data['t']) . '</div>';
    if (!empty($data['d'])) {
      $header_entry .= '<div class="th-title-description">' . t($data['d']) . '</div>';
    }
    $header[] = '<div class="th-title">' . $header_entry . '</div>';
  }

  foreach (element_children($items) as $delta) {
    $field_data = $items[$delta];
    $row = array();
    foreach ($_header as $type => $_data) {
      $data = $field_data[$_data['f']];
      $row[] = array("data" => drupal_render($data), "class" => "");
    }
    $rows[] = array("data" => $row, "class" => array("row-delta-" . $delta));
  }

  $wrapper_id = drupal_html_id($id . '-add-more-wrapper');
  $table_id = drupal_html_id($id . '_values');

  // TODO drag & drop and remove
  $output = '<div class="field-group-multiple-label-value"><div class="form-item">';
  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => $table_id, 'class' => array('field-group-multiple-table'))));
  $output .= isset($element['#description']) ? '<div class="description">' . $element['#description'] . '</div>' : '';
  $output .= '</div></div>';

  return $output;
}

/**
 * TODO implement drag & drop for order and remove item row
 */
function theme_field_group_multiple_table_form($variables) {
  drupal_add_css(drupal_get_path("module", "field_group_multiple") . "/field_group_multiple.css");
  $element = $variables['elements'];

  $orginal_fields = $element['#orginal'];
  $items = $element['items'];
  $group = $element['#group'];
  $id = $element['#id'];

  $header = array();
  $rows = array();

  foreach (element_children($orginal_fields) as $field_name) {
    $container = $orginal_fields[$field_name];
    $language = $container['#language'];
    $field_data = $container[$language];

    $field_title = $field_data['#title'];
    $field_description = $field_data['#description'];

    $header_entry = '<div class="th-title-label">' . t($field_title) . '</div>';
    if (!empty($field_data['#description'])) {
      $header_entry .= '<div class="th-title-description">' . t($field_description) . '</div>';
    }

    $header[] = '<div class="th-title">' . $header_entry . '</div>';
  }

  foreach (element_children($items) as $delta) {
    $field_data = $items[$delta];
    $row = array();
    foreach (element_children($field_data) as $field_name) {
      $data = $field_data[$field_name];
      $row[] = array("data" => drupal_render($data), "class" => "");
    }
    $rows[] = array("data" => $row, "class" => array("row-delta-" . $delta));
  }


  $wrapper_id = drupal_html_id($id . '-add-more-wrapper');
  $table_id = drupal_html_id($id . '_values');

  // TODO drag & drop and remove
  $output = '<div class="field-group-multiple-table"><div class="form-item">';
  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => $table_id, 'class' => array('field-group-multiple-table'))));
  $output .= isset($element['#description']) ? '<div class="description">' . $element['#description'] . '</div>' : '';
  $output .= '</div></div>';

  return $output;
}


function template_preprocess_field_group_multiple_container(&$variables) {
  drupal_add_css(drupal_get_path("module", "field_group_multiple") . "/field_group_multiple.css");

  $group = $variables['group'];
  $elements = $variables['elements'];
  $items = $variables['items'];

  // unset other children
  foreach (element_children($elements) as $field_name) {
    unset($elements[$field_name]['#items']);
    foreach (element_children($elements[$field_name]) as $nr) {
      unset($elements[$field_name][$nr]);
    }
  }

  $entries = array();
  foreach (element_children($items) as $delta) {
    $entry = array();
    foreach (element_children($items[$delta]) as $field_name) {
      $entry[$field_name] = $elements[$field_name];
      $entry[$field_name]['#items'][0] = $entry[$field_name][0] = $items[$delta][$field_name];
    }
    $entries[$delta] = $entry;
  }
  $variables['entries'] = $entries;

  if (empty($variables['theme_hook_suggestions'])) $variables['theme_hook_suggestions'] = array();

  $suggestions_prefix = "field_group_multiple_container";
  $variables['theme_hook_suggestions'] = _template_field_group_multiple_suggestions($suggestions_prefix, $group);
}


function template_preprocess_field_group_multiple_label_value(&$variables) {
  drupal_add_css(drupal_get_path("module", "field_group_multiple") . "/field_group_multiple.css");

  $group = $variables['group'];
  $elements = $variables['elements'];
  $items = $variables['items'];

  $label_field = $group->format_settings['instance_settings']['label_value_field'];
  $value_field = array_shift(array_diff($group->children, array($label_field)));

  $tmp_entry = $elements[$value_field];
  unset($tmp_entry['#items']);
  // unset other children
  foreach (element_children($tmp_entry) as $nr) {
    unset($tmp_entry[$nr]);
  }

  $entries = array();
  foreach (element_children($items) as $delta) {
    $values = $items[$delta];
    $entry = $tmp_entry;
    $entry['#title'] = $values[$label_field]['#markup'];
    $entry['#items'][0] = $entry[0] = $values[$value_field];
    $entries[$delta] = $entry;
  }
  $variables['entries'] = $entries;

  $suggestions_prefix = "field_group_multiple_label_value";
  $variables['theme_hook_suggestions'] = _template_field_group_multiple_suggestions($suggestions_prefix, $group);
}


function template_preprocess_field_group_multiple_table(&$variables) {
  drupal_add_css(drupal_get_path("module", "field_group_multiple") . "/field_group_multiple.css");

  $group = $variables['group'];
  $elements = $variables['elements'];
  $items = $variables['items'];

  $header = array();
  $rows = array();

  $id = $group->group_name;

  foreach (element_children($elements) as $field_name) {
    $field = $elements[$field_name];
    $field_title = $field['#title'];
    $header[] = t($field_title);
  }

  foreach (element_children($items) as $delta) {
    $row_values = $items[$delta];
    $row = array();
    foreach (element_children($row_values) as $field_name) {
      $data = $row_values[$field_name];
      $row[] = array("data" => drupal_render($data), "class" => "");
    }
    $rows[] = array("data" => $row, "class" => array("row-delta-" . $delta));
  }

  $table_id = drupal_html_id($id . '_values');
  $variables['table'] = theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => $table_id, 'class' => array('field-group-multiple-table'))));

  $suggestions_prefix = "field_group_multiple_table";
  $variables['theme_hook_suggestions'] = _template_field_group_multiple_suggestions($suggestions_prefix, $group);
}


function _field_group_multiple_build_transposed_widget_items($id, $entity_type, $entity, &$form, &$form_state, $cardinality) {
  $group_element =& _field_group_multiple_get_group_wrapper($id, $form);

  $fields = array();
  foreach($group_element['fields']['#fields'] as $field_name => $field_config){
    $langcode = 'und';
    $fields[$field_name]['items']  = field_get_items($entity_type, $entity, $field_name, $langcode);
    if(!$fields[$field_name]['items']){
      $fields[$field_name]['items'] = array();
    }
    $fields[$field_name]['default'] = field_get_default_value($entity_type, $entity, $field_config['field'], $field_config['instance'], $langcode);
  }

  $field_names = array_keys($fields);

//   $field_names = element_children($group_element['fields']['#widget']);
//   $fields = array();
//   foreach ($field_names as $field_name) {
//     $fields[$field_name] = $group_element['fields']['#widget'][$field_name];
//   }

  $field_values = _field_group_multiple_get_field_values($entity, $group_element['fields']['#orginal']);

  $field_value_count = count($field_values);
  $items_count = $cardinality == FIELD_CARDINALITY_UNLIMITED ? $field_value_count : $cardinality;

  if (isset($form_state['field_group_multiple'][$id]['count'])) {
    $items_count = $form_state['field_group_multiple'][$id]['count'];
  }
  else{
    $form_state['field_group_multiple'][$id]['count'] = $items_count;// = $field_value_count;
  }

  if($items_count == 0){
    $items_count++;
    $form_state['field_group_multiple'][$id]['count'] = $items_count;
  }

  if (($c_diff = abs($items_count - $field_value_count)) > 0) {
    for ($i=0; $i < $c_diff; $i++) {
      $data = array();
      foreach ($field_names as $field_name) {
        $data[$field_name] = NULL;
      }
      $field_values[] = $data;
    }
  }

  $items = array();
  for ($delta=0; $delta < $items_count; $delta++) {
    $field_cols = $field_values[$delta];
    foreach ($fields as $field_name => $field_items) {
      $field_config = $group_element['fields']['#fields'][$field_name];

      $field_items = array();
      if(isset($fields[$field_name]['items'][$delta])){
         $field_items[$delta] = $fields[$field_name]['items'][$delta];
      }else{
        $field_items[$delta] = $fields[$field_name]['default'];
      }

      $widget = _field_group_multiple_get_field_widget($field_config['field'], $field_config['instance'], 'und', $field_items, $delta, $form, $form_state);
      $widget['#multiple'] = false;

      if($group_element['fields']['#group']->format_type != 'field_group_multiple_container'){
        $reset_title = array('#title_display' => 'invisible', '#title' => '');
        $widget += $reset_title;
        _field_group_multiple_array_set_values($widget, $reset_title);
      }
      $items[$delta][$field_name] = $widget;
    }
  }
  $group_element['fields']['items'] = $items;
}


function _field_group_multiple_array_set_values(&$array, $values){
  foreach(element_children($array) as $key){
    $array[$key] += $values;
    _field_group_multiple_array_set_values($array[$key], $values);
  }
}



function _field_group_multiple_get_field_values($entity, $fields) {

  $values = array();
  $max_items = 0;

  foreach ($fields as $field_name => $field) {
    $language = $field['#language'];
    if (isset($entity->{$field_name}[$language])) {
      $count = count($entity->{$field_name}[$language]);
      if ($max_items < $count) {
        $max_items = $count;
      }
    }
  }

  for ($i=0; $i < $max_items; $i++) {
    foreach ($fields as $field_name => $field) {
      $language = $field['#language'];

      if (isset($entity->{$field_name}[$language][$i])) {
        $values[$i][$field_name] =  $entity->{$field_name}[$language][$i];
      }
      else {
        $values[$i][$field_name] =  NULL;
      }
    }
  }

  return $values;
}

/**
 * Snippet from field_multiple_value_form
 */
function _field_group_multiple_get_field_widget($field, $instance, $langcode, $items, $delta, $form, $form_state) {
  $element = NULL;
  $field_name = $field['field_name'];
  $parents = $form['#parents'];
  //$delta = isset($get_delta) ? $get_delta : 0;

  $function = $instance['widget']['module'] . '_field_widget_form';
  if (function_exists($function)) {
    $element = array(
            '#entity_type' => $instance['entity_type'],
            '#bundle' => $instance['bundle'],
            '#field_name' => $field_name,
            '#language' => $langcode,
            '#field_parents' => $parents,
            '#columns' => array_keys($field['columns']),
            '#title' => check_plain($instance['label']),
            '#description' => field_filter_xss($instance['description']),
    //   Only the first widget should be required.
            '#required' => $delta == 0 && $instance['required'],
            '#delta' => $delta,
    );
    if ($element = $function($form, $form_state, $field, $instance, $langcode, $items, $delta, $element)) {
      // Allow modules to alter the field widget form element.
      $context = array(
              'form' => $form,
              'field' => $field,
              'instance' => $instance,
              'langcode' => $langcode,
              'items' => $items,
              'delta' => $delta,
      );
      drupal_alter(array('field_widget_form', 'field_widget_' . $instance['widget']['type'] . '_form'), $element, $form_state, $context);
    }
  }
  return $element;
}

function _field_group_multiple_get_max_cardinality($cardinalities = array()){
  if(empty($cardinalities)) $cardinalities = array(0);

  $min_cardinality = min($cardinalities);
  $max_cardinality = max($cardinalities);

  if ($min_cardinality != $max_cardinality) {
    $min_cardinality = FIELD_CARDINALITY_UNLIMITED;

    foreach ($cardinalities as $field_name => $caridinality) {
      if($caridinality == FIELD_CARDINALITY_UNLIMITED){
        continue;
      }

      if($min_cardinality == FIELD_CARDINALITY_UNLIMITED || $min_cardinality > $caridinality) {
        $min_cardinality = $caridinality;
      }
    }
  }
  return $min_cardinality;
}


function _is_field_group_multiple($type) {
  return preg_match('/^' . FIELD_GROUP_MULTIPLE . '/', $type);
}

function _is_field_widget($widget) {
  return isset($widget['#entity_type']) && isset($widget['#bundle']) && isset($widget['#field_name']) && isset($widget['#language']) && isset($widget['#type']);
}


function _field_group_multiple_field_ui_group_function($group, $suffix = NULL) {
  if (_is_field_group_multiple($group->format_type) && !empty($suffix)) {
    module_load_include("inc", FIELD_GROUP_MULTIPLE, FIELD_GROUP_MULTIPLE . '.field_ui');
    $function = '_' . $group->format_type . '_' . $suffix;
    if (function_exists($function)) {
      return $function($group);
    }
  }
}

function _field_group_multiple_id($group, $mode) {
  return 'fgm_' . $group->entity_type . '_' . $group->bundle . '_' . $mode . '_' . $group->group_name;
}

function &_field_group_multiple_get_group_wrapper($id, &$form) {
  return $form[$id];
}

function _template_field_group_multiple_suggestions($suggestions_prefix, $group){
  $theme_hook_suggestions = array();
  $theme_hook_suggestions[] = $suggestions_prefix . "__" . $group->group_name;
  $theme_hook_suggestions[] = $suggestions_prefix . "__" . $group->entity_type;
  $theme_hook_suggestions[] = $suggestions_prefix . "__" . $group->entity_type . "__" . $group->group_name;
  $theme_hook_suggestions[] = $suggestions_prefix . "__" . $group->entity_type . "__" . $group->bundle;
  $theme_hook_suggestions[] = $suggestions_prefix . "__" . $group->entity_type . "__" . $group->bundle . "__" . $group->group_name;
  return $theme_hook_suggestions;
}