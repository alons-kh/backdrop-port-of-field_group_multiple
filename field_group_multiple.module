<?php

/**
 * Gruppierungsarten
 * - key => value
 * - matrix
 *
 */


function field_group_multiple_theme() {
  $path = drupal_get_path('module', 'field_group_multiple');

  return array(
  // rename to table
    'field_group_multiple_value_form' => array(
      'render element' => 'elements',
  ),
    'field_group_multiple_container' =>array(
      	'variables' => array('group' => NULL,'items' => array()),
        'template' => 'field-group-multiple-container',
        'pattern' => 'field-group-multiple-container__',
        'path' => $path,
    ),
  );
}

function theme_field_group_multiple_value_form($variables) {
  Logger::log("");
  $element = $variables['elements'];

  $orginal_fields = $element['#cache'];
  $id = $element['#id'];

  $field_matrix = $element['items'];
  $header = array();
  $rows = array();


  Logger::log(element_children($field_matrix));
  // TODO Pr√ºfe, ob untrige Elemente multiple Felder sind

  foreach(element_children($orginal_fields) as $field_name){

    $container = $orginal_fields[$field_name];
    $language = $container['#language'];
    $field_data = $container[$language];

    $field_title = $field_data['#title'];
    $field_description = $field_data['#description'];

    $header[] = t($field_title)."<br/><em>".t($field_description).'</em>';
  }

  foreach(element_children($field_matrix) as $delta){
    $field_data = $field_matrix[$delta];
    $row = array();
    foreach(element_children($field_data) as $field_name){
      $data = $field_data[$field_name];
      $row[] = array("data" => drupal_render($data), "class" => "");
    }
    $rows[] = array("data"=>$row,"class" => array("row-delta-".$delta));
  }


  $wrapper_id = drupal_html_id($id . '-add-more-wrapper');
  $table_id = drupal_html_id($id . '_values');

  $output = "";

  $output = '<div class="form-item">';
  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => $table_id, 'class' => array('field-group-multiple-table'))));
  //$output .= $element['#description'] ? '<div class="description">' . $element['#description'] . '</div>' : '';
  $output .= '</div>';

  return $output;

}

function field_group_multiple_field_group_formatter_info() {
  return array(
  	'display' => array(
  	  'field_group_multiple_table' => array(
  	    'label' => t('Multi field group table'),
  	    'description' => t('This fieldgroup renders the inner content with a theme.'),
  ),
  	  'field_group_multiple_label_value' => array(
  	    'label' => t('Multi field group label-value field'),
  	    'description' => t('This fieldgroup renders the inner content with a theme.'),
  ),
  	  'field_group_multiple_container' => array(
  	    'label' => t('Multi field group container'),
  	    'description' => t('This fieldgroup renders the inner content with a theme.'),
  ),
  ),
  	'form' => array(
  	  'field_group_multiple_table' => array(
  	    'label' => t('Multiple field group table'),
  	    'description' => t('This fieldgroup renders the inner content with a theme.'),
  ),
  	  'field_group_multiple_label_value' => array(
  	    'label' => t('Multiple field group label-value'),
  	    'description' => t('This fieldgroup renders the inner content with a theme.'),
  ),
  ),
  );
}

function field_group_multiple_field_group_format_settings($group){
  Logger::log("");
}
function field_group_multiple_field_group_format_summary($group){
  Logger::log("");
}

/**
 * Implements hook_field_group_pre_render().
 * This function (only) gives you the oppertunity to 'create' the given
 * wrapper field.
 * @param Array $elements by address.
 * @param Object $group The Field group info.
 */
function field_group_multiple_field_group_pre_render(&$element, $group, &$form) {
  $view_mode = isset($form['#view_mode']) ? $form['#view_mode'] : 'form';
  $group_type = $group->format_type;
  $id = $form['#entity_type'] . '_' . $form['#bundle'] . '_' . $view_mode . '_' . $group->group_name;

  if($view_mode == 'form'){
    // Modifications on formular widgets
    switch($group_type){
      case 'field_group_multiple_table':
        if(!isset($form['#field_group_multiple'][$group->group_name])) return;

        $group_id = $form['#field_group_multiple'][$group->group_name];

        // Disable Fields from view
        foreach($form[$group_id]['fields']['#children'] as $field_name){
          unset($element[$field_name]);
        }

        break;
      case 'field_group_multiple_label_value':
        break;
    }

  }else{
    // some display mode

    switch($group_type){
    case 'field_group_multiple_table':
            Logger::log("");
            Logger::log($group_type);
    break;
    case 'field_group_multiple_container':
      Logger::log("");

      $array_transposed = array();

      foreach($group->children as $field_name){
          $field =  $element[$field_name];
          //$field_type = $field['#field_type'];
          //$instance = $field['#object'];

          $info = field_info_field($field_name);
          $function = $info['module'] . '_field_is_empty';

          $map = array();
          $count = 0;

          foreach($field['#items'] as $delta => $value){
            $_res = $function($value,$info);
            if(!$_res){
              $field_value = $field[$count];
              $array_transposed[$delta][$field_name] = $field_value;
              $count++;
            }else{
              $array_transposed[$delta][$field_name] = null;
            }
          }
      }

      $element = array(
      	'#id' => $id,
      	'#type' => 'fieldset',
        '#title' => check_plain(t($group->label)),
        '#weight' => $group->weight,
        '#collapsible' => false,
        '#collapsed' => false,
        '#pre_render' => array(),
        //'#attributes' => array('class' => explode(' ', $classes)),
        //'#description' => $description,
      );

      $element['#attached']['js'][] = 'misc/form.js';
      $element['#attached']['js'][] = 'misc/collapse.js';

      $element['items'] = array(
        '#theme' => 'field_group_multiple_container',
        '#items' => $array_transposed,
        '#group' => $group,
      );


      //theme('field_group_multiple_container', array("rows"));
      break;

    case 'field_group_multiple_label_value':
    break;
    }

  }

}

function template_preprocess_field_group_multiple_container(&$variables){
  Logger::log("");
  Logger::log($variables);
  drupal_add_css(drupal_get_path("module", "field_group_multiple")."/field_group_multiple.css");

  // TODO theme suggestions
}

function template_preprocess_field_group_multiple_label_value(&$vars){
  // TODO theme
  // TODO theme suggestions
}


function template_preprocess_field_group_multiple_table(&$vars){
  // TODO theme
  // TODO theme suggestions
}



function field_group_multiple_add_more_submit($form, &$form_state) {
  Logger::log("");

  $button = $form_state['triggering_element'];
  $parents = array_slice($button['#array_parents'], 0, -1);
  $element = drupal_array_get_nested_value($form, $parents);

  if(isset($element['fields'])){
    //$group_name = $element['#group_name'];
    $id = $element['fields']['#id'];
    $form_state['field_group_multiple'][$id]['count']++;
  }

  $form_state['rebuild'] = TRUE;
}


function field_group_multiple_add_more_js($form, $form_state) {
  $button = $form_state['triggering_element'];
  $element = drupal_array_get_nested_value($form, array_slice($button['#array_parents'], 0, -1));
  return $element;
}


/**
 * Implements hook_field_attach_form().
 */
function field_group_multiple_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {

  $bundle = $form['#bundle'];
  $groups = field_group_info_groups($entity_type, $bundle, 'form');
  if(!empty($groups)){
    // Logger::log($form);


    foreach($groups as $group_name => $group){
      if(!preg_match("/^field_group_multiple/",$group->format_type)) continue;

      $id = $group->entity_type . '_' . $group->bundle . '_form_' . $group->group_name;
      if(empty($form['#field_group_multiple'])) $form['#field_group_multiple'] = array();

      $form['#field_group_multiple'][$group->group_name] = $id;

      $wrapper_id = $id . '-add-more-wrapper';

      $form[$id] = array(
      	'#prefix' => '<div id="' . $wrapper_id . '">',
      	'#suffix' => '</div>',
      	'#group_name' => $group->group_name
      );

      $form[$id]['fields'] = array(
      	'#theme' => 'field_group_multiple_value_form',
      	'#group_name' => $group->group_name,
      	'#id' => $id,
      	'#wrapper_id' => $wrapper_id,
      	'#children' => $group->children,
      );

      $form[$id]['fields']['#element_validate'] = array("field_group_multiple_field_form_validate");

      $form[$id]['add-more'] = array(
        '#type' => 'submit',
        '#name' => strtr($id, '-', '_') . '_add_more',
        '#value' => t('Add another item'),
        '#attributes' => array('class' => array('field-group-multiple-add-more-submit')),
      //'#limit_validation_errors' => array(array_merge($parents, array($field_name, $langcode))),
        '#submit' => array('field_group_multiple_add_more_submit'),
        '#ajax' => array(
          'callback' => 'field_group_multiple_add_more_js',
          'wrapper' => $wrapper_id,
          'effect' => 'fade',
      ),
      );

      $form_state['field_group_multiple'][$id]['parents'] = $form['#parents'];

      foreach($group->children as $field_name){
        $form[$id]['fields']['#cache'][$field_name] = $form[$field_name];

        // Disable Fields with pre_render
        $lang = $form[$field_name]['#language'];
        $form[$field_name][$lang]['#field_group_multiple'] = $id;

        if(!isset($form[$field_name][$lang]['#element_validate'])) $form[$field_name][$lang]['#element_validate'] = array();
        $form[$field_name][$lang]['#element_validate'] = array_merge(array("field_group_multiple_field_form_prepare_validate"), $form[$field_name][$lang]['#element_validate']);
      }

      _field_group_multiple_after_build_calculate_items($id, $entity_type, $entity, $form, $form_state);
    }
  }
}

function field_group_multiple_field_attach_submit($entity_type, &$entity, $form, &$form_state) {

  if(isset($form['#field_group_multiple'])){

    foreach($form['#field_group_multiple'] as $group_name => $id){

      $items_count = 0;
      $values = array();
      foreach($form[$id]['fields']['#cache'] as $field_name => $field_data){
        $lang = $field_data['#language'];
        $parents = $field_data[$lang]['#field_parents'];
        $parents[] = $field_name;

        $entity->{$field_name} = array();

        $values[$field_name]['values'] = drupal_array_get_nested_value($form_state['values'], $parents);
        if($items_count < count($values[$field_name]['values'][$lang])){
          $items_count = count($values[$field_name]['values'][$lang]);
        }

        // mark empty fields
        $info = field_info_field($field_name);
        $function = $info['module'] . '_field_is_empty';
        foreach($values[$field_name]['values'][$lang] as $delta => $value){
          $values[$field_name]['empty'][$delta] = $function($value,$info);
        }
      }

      for($i=0; $i < $items_count ; $i++){
        $is_empty = true;

        foreach($values as $field_name => $field_values){
          if(!$field_values['empty'][$i]) {
            $is_empty = false;
            break;
          }
        }

        if(!$is_empty){

          foreach($values as $field_name => $field_values){
            // TODO Currently only one value!!!
            $lang = key($field_values['values']);
            $entity->{$field_name}[$lang][] = $field_values['values'][$lang][$i];
          }
        }
      }
    }
  }
}


// function field_group_multiple_field_attach_presave($entity_type, $entity) {

//   if(isset($entity->{"_field_group_multiple"})){
//     foreach($entity->{"_field_group_multiple"} as $group_name => $fields){
//       foreach($fields as $field_name => $values){
//         // write values in correct order
//         $entity->{$field_name} = $values;
//       }
//     }
//     Logger::log($entity);
//   }
// }

// function field_group_multiple_field_attach_insert($entity_type, $entity) {
//   field_group_multiple_field_attach_save($entity_type, $entity);
// }

// function field_group_multiple_field_attach_update($entity_type, $entity) {
//   field_group_multiple_field_attach_save($entity_type, $entity);
// }

// function field_group_multiple_field_attach_save($entity_type, $entity) {
//   if(isset($entity->{"_field_group_multiple"})){
//     foreach($entity->{"_field_group_multiple"} as $group_name => $fields){
//       foreach($fields as $field_name => $values){
//         // write values in correct order
//         $entity->{$field_name} = $values;
//       }
//     }

//   }
// }

function field_group_multiple_field_form_prepare_validate(&$element, &$form_state){

  $field_name = $element['#field_name'];
  $field_lang = $element['#language'];
  $field_key = $element['#value_key'];
  Logger::log($field_name);

  $field_parents = $element['#field_parents'];
  $field_parents[] = $field_name;
  $field_parents[] = $field_lang;

  $field_group_multiple_id = $element['#field_group_multiple'];

  $group_parents = $form_state['field_group_multiple'][$field_group_multiple_id]['parents'];
  $group_parents[] = $field_group_multiple_id;
  $group_parents[] = "fields";

  $values = drupal_array_get_nested_value($form_state['values'], $group_parents);

  $new_values = array();

  if(!empty($values) && isset($values['items'])){
    $item_count = count($values['items']);

    if($item_count > 0){
      for($i=0;$i<$item_count; $i++){
        //$new_values[$i] = "_none";
        if(isset($values['items'][$i][$field_name])){
          // TODO gilt das nur bei listen???
          if($values['items'][$i][$field_name] == '_none'){
            $new_values[$i] = 0;
          }else{
            $new_values[$i] = $values['items'][$i][$field_name];
          }
        }
      }
    }
  }

  Logger::log($new_values);
  $element['#value'] = $new_values;
}


function field_group_multiple_field_form_validate($element, &$form_state) {
  // TODO in profile
  module_load_include("inc", "user", "user.pages");

//   Logger::log($form_state['complete form']['#validate']);
//   foreach($form_state['complete form']['#validate'] as $i => $function){
//     if(!function_exists($function)){
//       Logger::log($form_state['complete form']['#validate'][$i]);
//       unset($form_state['complete form']['#validate'][$i]);
//     }
//   }
//   Logger::log($form_state['complete form']['#submit']);
//   foreach($form_state['complete form']['#submit'] as $i => $function){
//     if(!function_exists($function)){
//       Logger::log($form_state['complete form']['#submit'][$i]);
//       unset($form_state['complete form']['#submit'][$i]);
//     }
//   }

}


function _field_group_multiple_after_build_calculate_items($id, $entity_type, $entity, &$form, &$form_state){
  Logger::log("");

  //   if(isset($form_state['field_group_multiple'][$id]['build'])) return;
  //   $form_state['field_group_multiple'][$id]['build'] = true;

  $group_parents = $form_state['field_group_multiple'][$id]['parents'];
  $field_names = element_children($form[$id]['fields']['#cache']);

  $fields = array();
  foreach($field_names as $field_name){
    $fields[$field_name] = $form[$id]['fields']['#cache'][$field_name];
  }

  $field_values = _field_group_multiple_get_field_values($entity, $fields);


  $items_count = 0;
  if(isset($form_state['field_group_multiple'][$id]['count'])){
    $items_count = $form_state['field_group_multiple'][$id]['count'];
  }else{
    $form_state['field_group_multiple'][$id]['count'] = $items_count = count($field_values);
  }


  foreach($fields as $field_name => $field){
    $language = $field['#language'];
    $field_data = $field[$language];

    $required = $field_data['#required'];
    $multiple = $field_data['#multiple'];

    // TODO kann auch festen Wert haben!!!
    if($multiple == 1){
      $new_field_data[$field_name] = $field_data;

      unset($new_field_data[$field_name]['#title'], $new_field_data[$field_name]['#description'],
      $new_field_data[$field_name]['#value'], $new_field_data[$field_name]['#default_value']);
      $new_field_data[$field_name]['#multiple'] = 0;

      // correct field parents
      $new_field_data[$field_name]['#field_parents'][] = $id;
      $new_field_data[$field_name]['#field_parents'][] = 'fields';
    }
  }

  if(($c_diff = abs($items_count - count($field_values))) > 0){
    for($i=0; $i < $c_diff; $i++){
      $data = array();
      foreach($field_names as $field_name){
        // TODO maybe default value ???
        $data[$field_name] = null;
      }
      $field_values[] = $data;
    }
  }

  $items = array();
  for($delta=0; $delta < $items_count; $delta++){
    $field_cols = $field_values[$delta];
    foreach($field_cols as $field_name => $field_value){
      $cell = $new_field_data[$field_name];
      $value_key = $cell['#value_key'];

      // falls rebuild dann nimm form_values
      $cell['#default_value'] = array();
      if(isset($field_value[$value_key])){
        $cell['#default_value'] = array($delta => $field_value[$value_key]);
      }
      $cell['#delta'] = $delta;
      $items[$delta][$field_name] = $cell;
    }
  }

  $form[$id]['fields']['items'] = $items;
}



function field_group_multiple_field_group_build_pre_render_alter(& $element){
  Logger::log("");
}


function _field_group_multiple_get_field_values($entity, $fields){

  $values = array();
  $max_items = 0;

  foreach($fields as $field_name => $field){
    $language = $field['#language'];
    $field_data = $field[$language];

    if(isset($entity->{$field_name}[$language])){
      if($max_items < count($entity->{$field_name}[$language])){
        $max_items = count($entity->{$field_name}[$language]);
      }
    }
  }

  for($i=0; $i < $max_items; $i++){
    foreach($fields as $field_name => $field){
      if(isset($entity->{$field_name}[$language][$i])){
        $values[$i][$field_name] =  $entity->{$field_name}[$language][$i];
      }else{
        $values[$i][$field_name] =  null;
      }
    }
  }

  // remove empty rows
  $corrected_values = array();
  foreach($values as $i => $data){
    $is_empty = false;
    foreach($data as $field_name => $field_value){
      if(is_null($field_value)){
        $is_empty = true;
      }else{
        $is_empty = false;
      }
    }
    if(!$is_empty){
      $corrected_values[] = $data;
    }
  }

  return $values;
}

// function field_group_multiple_ctools_plugin_api($module, $api){
//   Logger::log("");
// }
// function field_group_multiple_field_group_info(){
//   Logger::log("");
// }
// function field_group_multiple_field_group_update_field_group($group){
//   Logger::log("");
// }
// function field_group_multiple_field_group_delete_field_group($group){
//   Logger::log("");
// }
// function field_group_multiple_field_group_create_field_group($group){
//   Logger::log("");
// }



// function field_group_multiple_theme(){
//   $path = drupal_get_path('module', 'field_group_multiple');

//   return array(
// 	  'field_group_multiple_label_value' =>
// 	    array("variables" => array("element" => NULL,"group" => NULL)),
// 	  'field_group_multiple_table' =>
// 	    array("variables" => array("element" => NULL,"group" => NULL)),
// 	  'field_group_multiple' => array(
//       	'variables' => array('group' => NULL,'element' => NULL),
//         'template' => 'field_group_multiple',
//         'pattern' => 'field_group_multiple__',
//         'path' => $path,
//     ),
//   );
// }


/**
 * A preprocess function for our theme('multi_group_special'). It generates the
* variables needed there.

* See 'multi_group.tpl.php' for their documentation.
*/
/*
 function template_preprocess_multi_group(&$variables) {
$group = $variables['group'];

$variables['theme_hook_suggestions'][] = 'multi_group__' . $group->name;
// // Logger::log(__METHOD__." HALLO ".print_r($variables['theme_hook_suggestions'],true));
}
*/


// function theme_multi_group_template($variables){
//   $element = $variables['element'];
//   $group = $variables['group'];

//   $rows_size = 0;
//   $fields = array();
//   $header = array();

//   foreach($element as $fieldname => $field_data){
//     $weight =  $field_data["#weight"];
//     $header[$weight] = $field_data["#title"];
//     $fields[$weight] = $fieldname;

//     $tmp_size = count($field_data["#items"]);

//     if($rows_size < $tmp_size){
//       $rows_size = $tmp_size;
//     }
//   }
//   ksort($fields); ksort($header);

//   $rows = array();
//   for($i=0;$i<$rows_size;$i++) {
//     $row = array();
//     foreach($fields as  $fieldname){
//       $field_data = $element[$fieldname][$i];
//       $row[] = drupal_render($field_data);
//     }
//     $rows[] = $row;
//   }

//   $classes = $group->name;
//   if (isset($group->format_settings['instance_settings'], $group->format_settings['instance_settings']['classes'])) {
//     $classes .= ' ' . check_plain($group->format_settings['instance_settings']['classes']);
  //   }


  //   $out = '<div class="field-group-format ' . $classes. '">
  //               <span class="field-group-format-toggler">' . check_plain(t($group->label)) . '</span>
  //               <div class="field-group-format-wrapper" style="display: ' . ($collapsed ? 'none' : 'block') . ';">';
  //   $out .= theme("table",array("header"=>$header,"rows"=>$rows));
  //   $out .= '</div></div>';


  //   return $out;
  // }


  // function theme_multi_group_label_value($variables){
  //   $element = $variables['element'];
  //   $group = $variables['group'];


  //   $fields = array();
  //   foreach($element as $fieldname => $field_data){
  //     $weight =  $field_data["#weight"];
    //     $fields[$weight] = $fieldname;
    //   }
    //   ksort($fields);


    //   $labels = $element[array_shift($fields)];
    //   $values = $element[array_shift($fields)];

    //   $defaults = array();
    //   $defaults['#theme'] = "field";
    //   $defaults['#access'] = TRUE;
    //   $defaults['#label_display'] = $values['#label_display'];
    //   $defaults['#field_name'] = $values['#field_name'];
    //   $defaults['#bundle'] = $values['#bundle'];
    //   $defaults['#field_type'] = $values['#field_type'];

    //   $size = count($values['#items']);
    //   $items = array();

    //   for($i=0; $i < $size; $i++) {
    //     $tmp = $defaults;
    //     $tmp['#title'] = ucfirst($labels[$i]["#markup"]);
    //     $tmp['#items'][0] = $values['#items'][$i];
    //     $tmp[0]['#markup'] = $values[$i]['#markup'];

    //     $items[] = drupal_render($tmp);
    //   }

    //   if(isset($group->name))	$classes = $group->name;
    //   else $classes = '';
    //   if (isset($group->format_settings['instance_settings'], $group->format_settings['instance_settings']['classes'])) {
    //     $classes .= ' ' . check_plain($group->format_settings['instance_settings']['classes']);
    //   }

    //   return implode("\n",$items);
    // }
